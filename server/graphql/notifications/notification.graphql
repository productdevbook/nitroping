enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  SCHEDULED
}

enum DeliveryStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  CLICKED
}

type Notification {
  id: ID!
  appId: ID!
  app: App
  title: String!
  body: String!
  data: JSON
  imageUrl: String
  clickAction: String
  sound: String
  badge: Int
  status: NotificationStatus!
  
  # Targeting
  targetDevices: JSON # Array of device IDs
  platforms: JSON # Array of platforms
  scheduledAt: Timestamp
  
  # Statistics
  totalTargets: Int!
  totalSent: Int!
  totalDelivered: Int!
  totalFailed: Int!
  totalClicked: Int!
  
  # Relations
  deliveryLogs: [DeliveryLog!]
  
  # Timestamps
  createdAt: Timestamp!
  updatedAt: Timestamp!
  sentAt: Timestamp
}

type DeliveryLog {
  id: ID!
  notificationId: ID!
  notification: Notification
  deviceId: ID!
  device: Device
  status: DeliveryStatus!
  errorMessage: String
  clickedAt: Timestamp
  
  # Timestamps
  createdAt: Timestamp!
  updatedAt: Timestamp!
}

input SendNotificationInput {
  appId: ID!
  title: String!
  body: String!
  data: JSON
  imageUrl: String
  clickAction: String
  sound: String
  badge: Int
  
  # Targeting
  targetDevices: JSON # Array of device IDs or tokens
  platforms: JSON # Array of platforms
  scheduledAt: Timestamp
}

extend type Query {
  notifications(appId: ID): [Notification!]!
  notification(id: ID!): Notification
  deliveryLogs(notificationId: ID): [DeliveryLog!]!
}

extend type Mutation {
  sendNotification(input: SendNotificationInput!): Notification!
  scheduleNotification(input: SendNotificationInput!): Notification!
  cancelNotification(id: ID!): Boolean!
}